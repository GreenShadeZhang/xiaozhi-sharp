@page "/"
@implements IDisposable

<table width="100%" style="text-align:center;">
    <tr>
        <td style="height:50px;"></td>
    </tr>
    <tr>
        <td><h2>XiaoZhiSharp</h2></td>
    </tr>
    <tr>
        <td><span style="font-size:xx-large;zoom:2.0;">@EmotionText</span></td>
    </tr>
    <tr>
        <td><h2>@Message</h2></td>
    </tr>
    <tr>
        <td style="height:20px;"></td>
    </tr>
    <tr>
        <td>
            语音
            <Switch @bind-Checked="_isAudioSwitchValue" />
        </td>
    </tr>
    <tr>
        <td style="height:20px;"></td>
    </tr>
    <tr>
        <td style="padding:10px;">
            @* <input @bind="newMessage" @onkeydown="HandleKeyDown" placeholder="输入消息" /> *@
            @* <button @onclick="SendMessage">发送文字消息</button> *@
            <Search Placeholder="" @bind-Value="@_newMessage" EnterButton="@("发送")" OnSearch="SendMessage" Size="InputSize.Large" Suffix="@_emotionIcon" />
        </td>
    </tr>
    <tr>
        <td style="padding:10px;text-align:left;">@MyMessage</td>
    </tr>
    <tr>
        <td style="height:20px;"></td>
    </tr>
    <tr>
        <td>
            @* <img src="images/wx.jpg" width="120px" /> *@
        </td>
    </tr>
    <tr>
        <td style="padding:10px;text-align:left;font-size:small;zoom:0.8;">
            @foreach (var msg in MessageList)
            {
                @msg <br>
            }
        </td>
    </tr>
</table>




@code {
    private System.Timers.Timer _timer = new System.Timers.Timer(1000) { Enabled = true };
    private string _newMessage;
    private bool _isAudioSwitchValue { get; set; }
    RenderFragment _emotionIcon = @<span>@EmotionText</span>;


    protected override async Task OnInitializedAsync()
    {
        _timer.Elapsed += Timer_Elapsed;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async void Timer_Elapsed(object sender, EventArgs args)
    {
        await Task.Factory.StartNew(() =>
        {
            InvokeAsync(() => { StateHasChanged(); return Task.CompletedTask; });
        });
    }

    void IDisposable.Dispose()
    {
        _timer.Close();
    }
}
